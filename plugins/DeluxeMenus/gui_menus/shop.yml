# shop GUI menu configuration
# 
# configuration layout:
# 
# menu_title: '<title of menu goes here>'
# inventory_type: '<add this option if you want to create a menu of a different InventoryType aside from chest>'
# command: <command to open this menu goes here>
# open_requirement:
#   requirements:
#     <unique name for this requirement>:
#       type: <type for this requirement>
#       <unique options per requirement type would go here>
#       deny_commands:
# 	   - '[message] you do not meet requirements to open this menu'
# size: <size of this menu, increments of 9, max size is 54>
# update_interval: <time in seconds this gui should update for a player if an item is set to uodate placeholders>
# items:
#   <item identifier>:
#     material: <name or id>
#     material: head-<name of player>
#     material: hdb-<HeadDatabase id> (requires plugin HeadDatabase)
#     entitytype: <name of entity type for mob eggs> https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/entity/EntityType.html'>
#     data: <integer, used for data values for wool etc>
#     amount: <amount of this item to show>
#     slot: <slot number to put this item, slots start at 0 and end at 53 for a size 54 inventory>
#     priority: <this is used if you have multiple items set for the same slot>
#     view_requirement: <see item view requirement info below. The lowest priority item a player meets all view requirements for will be shown>
#     update: <true/false if this item should update placeholders on the interval set for the gui menu this item is in>
#     hide_attributes: <true/false if this item should display item attributes>
#     hide_enchantments: <true/false if this item should display item enchantment / level> (useful for 'enchantment glow' items)
#     hide_effects: <true/false if this item should display item effect attributes>
#     hide_unbreakable: <true/false if this item should display item unbreakable attributes>
#     display_name: <display name to show for this item>
#     banner_meta: (this is used if you want to display a custom banner with specific patterns)
#     - <dyecolor>;<PatternType> (more information on where to find DyeColor and PatternType names below)
#     - 'RED;BASE'
#     - 'WHITE;CREEPER'
#     lore:
#     - 'placeholders can be used in the name and lore'
#     - '%<any placeholder from Papi>% shows the viewer values'
#     enchantments: valid enchantment names can be found here: https://hub.spigotmc.org/javadocs/spigot/org/bukkit/enchantments/Enchantment.html
#     - '<ENCHANTMENT>;<LEVEL>'
#     - 'SILK_TOUCH;1'
#     left_click_commands:
#     - '[close]'
#     left_click_requirement: <see how to use this option below>
#     right_click_commands:
#     - '[player] spawn'
#     right_click_requirement: <see how to use this option below>
# 
# All keys aside from update_interval are required for this menu to be valid and loaded!
# The only options for an item to be considered valid are material and slot!
# 
# banner_meta must be listed with a specific format:
# banner_meta:
# - <DyeColor>;<PatternType>
# 
# Valid DyeColor names can be found here: https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/DyeColor.html
# Valid PatternTypes can be found here: https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/block/banner/PatternType.html
# ==============================================================
# 
# Requirement information
# 
# Requirements can be set as the following:
# 
# open_requirement: This requirement is checked when a menu is opened
# view_requirement: This requirement determines if an item should be set in a menu slot
# left_click_requirement: This requirement is checked when an item is left clicked
# right_click_requirement: This requirement is checked when an item is right clicked
# 
# Requirement types:
#   javascript - Evaluates a javascript expression that must return true or false
#     configuration options:
#       expression
# 
#   has item - Checks if a player has a specific item
#     configuration options:
#       material
#       amount
#       data
#       name
#       lore
# 
#   has money - Checks if a player has enough money (Vault required)
#     configuration options:
#       amount
# 
#   has permission - Checks if a player has a specific permission
#     configuration options:
#       permission
# 
#   string contains - Checks if a string contains another string
#     configuration options:
#       input
#       output
# 
#   string equals - Checks if a string equals another string
#     configuration options:
#       input
#       output
# 
#   stringequalsignorecase - Checks if a string equals another string ignoring case
#     configuration options:
#       input
#       output
# 
#   > - Checks if a number is greater than another number
#     configuration options:
#       input
#       output
# 
#   >= - Checks if a number is greater than or equal to another number
#     configuration options:
#       input
#       output
# 
#   == - Checks if a number is equal to another number
#     configuration options:
#       input
#       output
# 
#   <= - Checks if a number is less than or equal to another number
#     configuration options:
#       input
#       output
# 
#   < - Checks if a number is less than another number
#     configuration options:
#       input
#       output
# 
# 
# 
# So why would we want to use requirements?
# By default, DeluxeMenus does not require a player meet any conditions to open your menu.
# If you want to require a menu need a certain permission node for it to be accessed, or a certain amount of money
# for a menu to be opened, You do that with an 'open_requirement'.
# Below is an example of how you would deny opening a menu if the viewer does not have permission:
# 
# menu_title: 'Menu that requires permission to open'
# open_command: testmenu
# size: 9
# open_requirement:
#   requirements:
#     this_requirement_name:
#       type: has permission
#       permission: 'testmenu.open'
#       deny_commands:
#       - '[message] you do not have permission to open testmenu'
# 
# 
# Below is a full example of use cases for requirements:
# 
# 				menu_title: 'Menu that requires permission to open'
# 					open_command: testmenu
# 					size: 9
# 					open_requirement:
# 					  requirements:
# 					    this_requirement_name:
# 					      type: has permission
# 					      permission: 'testmenu.open'
# 					      deny_commands:
# 					      - '[message] you do not have permission to open testmenu'
# 					items:
# 					  mymenuitem:
# 					    priority: 2
# 					    material: DIRT
# 					    slot: 0
# 					    name 'You dont have 100 diamonds to view this item'
# 					  mymenuitem:
# 					    priority: 1
# 					    material: DIAMOND
# 					    slot: 0
# 					    name 'You have lots of diamonds so you can see this item'
# 					    view_requirement:
# 					      requirements:
# 					        diamond_requirement:
# 					          type: has item
# 					          material: diamond
# 					          amount: 100
# 					    left_click_requirement:
# 					      requirements:
# 					        money_requirement:
# 					          type: '>='
# 					          input: '%vault_eco_balance_fixed%'
# 					          output: 1000
# 					          deny_commands:
# 					          - '[message] you only have %vault_eco_balance_fixed%'
# 					    left_click_commands:
# 					    - '[message] you have over 1000 dollars!'
# 					    right_click_requirement:
# 					      requirements:
# 					        staff_requirement:
# 					          type: string equals
# 					          input: '%vault_rank%'
# 					          output: staff
# 					          deny_commands:
# 					          - '[message] you are not staff'
# 					    right_click_commands:
# 					    - '[message] you are staff'
# 
# deny_commands: are optional and will be executed if the requirement is not met.
# ==============================================================
menu_title: '&fshop &aGUI menu'
open_command: shopgui
size: 9
open_requirement:
  requirements:
    permission:
      type: has permission
      permission: menu.open.shop
      deny_commands:
      - '[message] You dont have permission to open menu: shop'
items:
  '1':
    material: head;%player_name%
    slot: 0
    display_name: '&aHey &f%player_name%'
    lore:
    - '&aYou opened a GUI menu'
    - '&aThis menu is just for you!'
    left_click_commands:
    - '[close]'
    right_click_commands:
    - '[player] help'
    - '[close]'
  '2':
    material: DIRT
    data: 0
    amount: 1
    slot: 1
    priority: 1
    view_requirement:
      requirements:
        permission:
          type: has permission
          permission: some.permission
    display_name: '&bTeleport home'
    lore:
    - '&bClick to teleport'
    - '&bto your home'
    click_commands:
    - '[player] home'
    - '[close]'
  '3':
    material: DIRT
    data: 0
    amount: 1
    slot: 1
    priority: 2
    display_name: '&bTeleport to spawn'
    lore:
    - '&bClick to teleport'
    - '&bto the server spawn'
    click_commands:
    - '[player] spawn'
    - '[close]'
